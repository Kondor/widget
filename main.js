window.onload = function () {
    const size = document.getElementById('size'); const rotation = document.getElementById('rotation'); size.addEventListener('input', () => { canvas.style.transform = `scale(${size.value}) rotate(${rotation.value}deg`; }); rotation.addEventListener('input', () => { canvas.style.transform = `scale(${size.value}) rotate(${rotation.value}deg`; }); let frameWidth = 0; let framePng = new Image(); let frameImageWidth = 0; const name = document.getElementById('nameGlasses'); const photo = document.getElementById('photoGlasses'); const description = document.getElementById('descriptionGlasses'); const otherName1 = document.getElementById('otherName1'); const otherName2 = document.getElementById('otherName2'); const otherName3 = document.getElementById('otherName3'); const otherPhoto1 = document.getElementById('otherPhoto1'); const otherPhoto2 = document.getElementById('otherPhoto2'); const otherPhoto3 = document.getElementById('otherPhoto3'); const canvas3 = document.getElementById('canvas-3'); fetch('https://optimaxdev.github.io/volga-it/response.json').then(res => res.json()).then(data => {
        console.log(data.items); let fill = 0; name.innerHTML = data.items[0].name; photo.src = data.items[0].image; description.innerHTML = data.items[0].description; frameWidth = data.items[0].width; framePng.src = data.items[0].mirror_frame; framePng.onload = () => { frameImageWidth = framePng.naturalWidth; }
        while (fill !== 3) { let glasses = Math.round(Math.random() * (data.items.length - 1 - 1)) + 1; if (data.items[glasses].name === name.innerText || data.items[glasses].name === otherName1.innerText || data.items[glasses].name === otherName2.innerText || data.items[glasses].name === otherName3.innerText) continue; if (otherName1.innerText === '') { otherName1.innerHTML = data.items[glasses].name; otherPhoto1.src = data.items[glasses].image; otherPhoto1.alt = data.items[glasses].name; fill++; } else if (otherName2.innerText === '') { otherName2.innerHTML = data.items[glasses].name; otherPhoto2.src = data.items[glasses].image; otherPhoto2.alt = data.items[glasses].name; fill++; } else { otherName3.innerHTML = data.items[glasses].name; otherPhoto3.src = data.items[glasses].image; otherPhoto3.alt = data.items[glasses].name; fill++; } }
    }); $("div.clickGlasses").on("click", function (elem) { fetch('https://optimaxdev.github.io/volga-it/response.json').then(res => res.json()).then(data => { for (let i = 0; i < data.items.length; i++) { if (data.items[i].name == this.firstElementChild.alt) { this.firstElementChild.alt = name.innerHTML; this.firstElementChild.src = photo.src; this.lastElementChild.innerHTML = name.innerHTML; name.innerHTML = data.items[i].name; photo.src = data.items[i].image; photo.alt = data.items[i].name; description.innerHTML = data.items[i].description; frameWidth = data.items[i].width; framePng.src = data.items[i].mirror_frame; break; } } canvas3.getContext('2d').clearRect(0, 0, canvas.width, canvas.height); canvas3.getContext('2d').drawImage(framePng, panX + 92, panY + 85, framePng.width * Math.abs((frameWidth / frameImageWidth) - (62 / 70)), framePng.height * Math.abs((frameWidth / frameImageWidth) - (62 / 80))); }); }); const upload = document.getElementById('getPhoto'); const textWaiting = document.getElementById('textWhileWaitingPhoto'); const textOnButton = document.getElementById('textOnButton'); const background = document.getElementById('showPhoto'); const video = document.getElementById('video'); const canvas = document.getElementById('canvas'); const downerContent = document.getElementById('similar'); const descriptionClass = document.querySelector('.description'); const blockOfTools = document.querySelector('.blockOfTools'); const acceptChanges = document.querySelector('.acceptChanges'); const warppingVideo = document.querySelector('.warppingVideo'); const context = canvas.getContext('2d'); let cameraOn = false; if (cameraOn === false) {
        upload.onclick = function () {
            upload.style.display = 'none'; canvas.style.display = 'none'; background.classList.add('takingAPicture'); textWaiting.classList.add('objectShow'); if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia({ video: true }).then(function (stream) {
                    textWaiting.classList.remove('objectShow'); warppingVideo.style.display = 'block'; upload.style.display = 'flex'; video.classList.add('objectShow'); textOnButton.innerHTML = "Shoot"; video.srcObject = stream; cameraOn = true
                    video.play(); if (cameraOn === true) { upload.onclick = function () { canvas3.getContext('2d').clearRect(0, 0, canvas.width, canvas.height); canvas3.style.display = 'none'; textOnButton.innerHTML = "Retake"; video.classList.remove('objectShow'); canvas.style.display = 'block'; context.drawImage(video, 40, 0, 220, 160); stream.getTracks()[0].stop(); moveTriger(); cameraOn = false; descriptionClass.style.display = 'none'; downerContent.style.display = 'none'; blockOfTools.style.display = 'flex'; acceptChanges.style.display = 'flex'; } }
                }).catch(function (err) { alert(`Ошибка доступа камеры! \n\n${err}`); });
            }
        }
    } let panX = 0; let panY = 0; let lastX = 0; let lastY = 0; let dx; let dy; function moveTriger() {
        let canvas2 = document.getElementById("canvas-2"); canvas2.style.display = 'block'; let ctx = canvas2.getContext("2d"); ctx.strokeStyle = "red"; ctx.lineWidth = 1; let canvasOffset = $("#canvas-2").offset(); let offsetX = canvasOffset.left; let offsetY = canvasOffset.top; let dragging = []; let isDown = false; let images = []; images.push({ x: 180, y: 100 }); images.push({ x: 120, y: 100 }); draw(); function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height); for (let i = 0; i < images.length; i++) {
                let img = images[i]; ctx.beginPath(); ctx.arc(img.x + panX, img.y + panY, 5, 0, 2 * Math.PI)
                ctx.stroke();
            }
        } function imagesHitTests(x, y) { x -= panX; y -= panY; let hits = []; for (let i = 0; i < images.length; i++) { let img = images[i]; if (x > img.x && x < img.x + img.width && y > img.y && y < img.y + img.height) { hits.push(i); } } return (hits); } function handleMouseDown(e) { mouseX = parseInt(e.clientX - offsetX); mouseY = parseInt(e.clientY - offsetY); lastX = mouseX; lastY = mouseY; dragging = imagesHitTests(mouseX, mouseY); isDown = true; } function handleMouseUp(e) { isDown = false; } function handleMouseMove(e) { if (!isDown) return; mouseX = parseInt(e.clientX - offsetX); mouseY = parseInt(e.clientY - offsetY); dx = mouseX - lastX; dy = mouseY - lastY; lastX = mouseX; lastY = mouseY; if (dragging.length > 0) { for (let i = 0; i < dragging.length; i++) { img = images[dragging[i]]; img.x += dx; img.y += dy; } } else { panX += dx; panY += dy; } draw(); } $("#canvas-2").mousedown(function (e) { handleMouseDown(e); }); $("#canvas-2").mousemove(function (e) { handleMouseMove(e); }); $("#canvas-2").mouseup(function (e) { handleMouseUp(e); });
    } const canvas2 = document.getElementById("canvas-2"); const ctx = canvas2.getContext("2d"); const buttonTryOnGlasses = document.getElementById('tryOnGlasses'); buttonTryOnGlasses.onclick = function () { const pd = document.querySelector('.pd').value; const frameScaleW = (framePng.width * (frameWidth / frameImageWidth) - (pd / 70)) / 1.2; const frameScaleH = (framePng.height * (frameWidth / frameImageWidth) - (pd / 70)) / 1.5; canvas3.getContext('2d').clearRect(0, 0, canvas.width, canvas.height); ctx.clearRect(0, 0, canvas.width, canvas.height); blockOfTools.style.display = 'none'; canvas2.style.display = 'none'; canvas3.style.display = 'block'; acceptChanges.style.display = 'none'; descriptionClass.style.display = 'block'; downerContent.style.display = 'block'; canvas3.getContext('2d').drawImage(framePng, panX + 92, panY + 85, frameScaleW, frameScaleH); }
}